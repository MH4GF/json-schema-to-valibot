# JSONSchema to Valibot Implementation Rules

## 1. Required Context Files
- [jsonSchemaToValibot.ts](mdc:src/jsonSchemaToValibot.ts): Main implementation
- [jsonSchemaToValibot.test.ts](mdc:src/jsonSchemaToValibot.test.ts): Unit tests
- [cli.ts](mdc:src/cli.ts): CLI interface
- [cli.test.ts](mdc:src/cli.test.ts): CLI tests
- [package.json](mdc:test/fixtures/schemastore/src/schemas/json/package.json): JSON Schema fixture
- [package.json.ts](mdc:test/output/schemastore/package.json.ts): Output file

## 2. Feature Implementation Flow

1. **Identify Core Functionality**
   - Analyze specific use cases (e.g., package.json fields)
   - Extract general functionality (e.g., enum support, validation rules)
   - Focus on implementing reusable features rather than specific schema support

2. **Test-Driven Development (TDD)**
   1. Red: Write a failing test
      - Start with specific use case test
      - Generalize the test case to cover broader functionality
      - Add test to [jsonSchemaToValibot.test.ts](mdc:src/jsonSchemaToValibot.test.ts)
   2. Green: Make the test pass
      - Implement the feature in [jsonSchemaToValibot.ts](mdc:src/jsonSchemaToValibot.ts)
      - Focus on functionality first, code organization later
   3. Refactor: Improve the code
      - Extract reusable functions (e.g., `parseEnum`, `parseString`)
      - Ensure all tests continue to pass

3. **Code Organization**
   - Keep related functionality together
   - Create dedicated parsing functions for each schema type
   - Follow consistent patterns for handling defaults and descriptions

4. **Critical Instructions for package.json.ts**
   - ⚠️ NEVER modify [package.json.ts](mdc:test/output/schemastore/package.json.ts) directly
   - This is an auto-generated file produced by CLI test execution
   - Any changes must be made through implementation updates
   - Follow these steps for modifications:
     1. Update the test case in [jsonSchemaToValibot.test.ts](mdc:src/jsonSchemaToValibot.test.ts)
     2. Update the implementation in [jsonSchemaToValibot.ts](mdc:src/jsonSchemaToValibot.ts)
     3. Verify through CLI tests

## 3. Issue Resolution Protocol

1. **Problem Analysis**
   - Identify if the issue is specific (e.g., package.json field) or general (e.g., enum support)
   - Review relevant schema definitions and expected output
   - Create minimal reproduction case

2. **Implementation Strategy**
   - Start with general functionality
   - Add specific handling only when necessary
   - Maintain backwards compatibility

3. **Testing Strategy**
   - Write tests for general functionality first
   - Add specific test cases as needed
   - Use snapshot testing for complex outputs

4. **Verification**
   - Run all tests to ensure no regressions
   - Verify CLI output matches expectations
   - Check generated package.json.ts for correctness
