// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CLI > SchemaStore Integration Tests > should convert package.json schema 1`] = `
"import * as v from "valibot";

export default v.object({name: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(214), v.regex(/^(?:(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?\\/[a-z0-9-._~])|[a-z0-9-~])[a-z0-9-._~]*$/), v.description("The name of the package."))),version: v.optional(v.pipe(v.string(), v.description("Version must be parseable by node-semver, which is bundled with npm as a dependency."))),description: v.optional(v.pipe(v.string(), v.description("This helps people discover your package, as it's listed in 'npm search'."))),keywords: v.optional(v.array(v.string())),homepage: v.optional(v.pipe(v.string(), v.description("The url to the project homepage."))),bugs: v.optional(v.union([v.pipe(v.object({url: v.optional(v.pipe(v.string(), v.description("The url to your project's issue tracker."))),email: v.optional(v.pipe(v.string(), v.description("The email address to which issues should be reported.")))}), v.description("The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.")), v.pipe(v.string(), v.description("The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package."))])),license: v.optional(v.any()),licenses: v.optional(v.array(v.object({type: v.optional(v.any()),url: v.optional(v.string())}))),author: v.optional(v.any()),contributors: v.optional(v.array(v.any())),maintainers: v.optional(v.array(v.any())),files: v.optional(v.array(v.string())),main: v.optional(v.pipe(v.string(), v.description("The main field is a module ID that is the primary entry point to your program."))),exports: v.optional(v.any()),imports: v.optional(v.object({})),bin: v.optional(v.union([v.string(), v.object({})])),type: v.optional(v.picklist(["commonjs","module"]), 'commonjs'),types: v.optional(v.pipe(v.string(), v.description("Set the types property to point to your bundled declaration file."))),typings: v.optional(v.pipe(v.string(), v.description("Note that the \\"typings\\" field is synonymous with \\"types\\", and could be used as well."))),typesVersions: v.optional(v.object({})),man: v.optional(v.union([v.array(v.string()), v.pipe(v.string(), v.description("Specify either a single file or an array of filenames to put in place for the man program to find."))])),directories: v.optional(v.object({bin: v.optional(v.pipe(v.string(), v.description("If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash."))),doc: v.optional(v.pipe(v.string(), v.description("Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday."))),example: v.optional(v.pipe(v.string(), v.description("Put example scripts in here. Someday, it might be exposed in some clever way."))),lib: v.optional(v.pipe(v.string(), v.description("Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info."))),man: v.optional(v.pipe(v.string(), v.description("A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder."))),test: v.optional(v.string())})),repository: v.optional(v.union([v.pipe(v.object({type: v.optional(v.string()),url: v.optional(v.string()),directory: v.optional(v.string())}), v.description("Specify the place where your code lives. This is helpful for people who want to contribute.")), v.pipe(v.string(), v.description("Specify the place where your code lives. This is helpful for people who want to contribute."))])),funding: v.optional(v.any()),scripts: v.optional(v.pipe(v.object({lint: v.optional(v.pipe(v.string(), v.description("Run code quality tools, e.g. ESLint, TSLint, etc."))),prepublish: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is published (Also run on local npm install without any arguments)."))),prepare: v.optional(v.pipe(v.string(), v.description("Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly."))),prepublishOnly: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is prepared and packed, ONLY on npm publish."))),prepack: v.optional(v.pipe(v.string(), v.description("run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies)."))),postpack: v.optional(v.pipe(v.string(), v.description("Run AFTER the tarball has been generated and moved to its final destination."))),publish: v.optional(v.pipe(v.string(), v.description("Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish"))),postpublish: v.optional(v.any()),preinstall: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is installed."))),install: v.optional(v.any()),postinstall: v.optional(v.any()),preuninstall: v.optional(v.any()),uninstall: v.optional(v.any()),postuninstall: v.optional(v.pipe(v.string(), v.description("Run AFTER the package is uninstalled."))),preversion: v.optional(v.any()),version: v.optional(v.any()),postversion: v.optional(v.pipe(v.string(), v.description("Run AFTER bump the package version."))),pretest: v.optional(v.any()),test: v.optional(v.any()),posttest: v.optional(v.any()),prestop: v.optional(v.any()),stop: v.optional(v.any()),poststop: v.optional(v.any()),prestart: v.optional(v.any()),start: v.optional(v.any()),poststart: v.optional(v.any()),prerestart: v.optional(v.any()),restart: v.optional(v.any()),postrestart: v.optional(v.any()),serve: v.optional(v.pipe(v.string(), v.description("Start dev server to serve application files")))}), v.description("The 'scripts' member is an object hash of script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point."))),config: v.optional(v.object({})),dependencies: v.optional(v.any()),devDependencies: v.optional(v.any()),optionalDependencies: v.optional(v.any()),peerDependencies: v.optional(v.any()),peerDependenciesMeta: v.optional(v.any()),bundleDependencies: v.optional(v.any()),bundledDependencies: v.optional(v.any()),resolutions: v.optional(v.object({})),overrides: v.optional(v.object({})),packageManager: v.optional(v.pipe(v.string(), v.regex(/(npm|pnpm|yarn|bun)@\\d+\\.\\d+\\.\\d+(-.+)?/), v.description("Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html"))),engines: v.optional(v.object({node: v.optional(v.string())})),volta: v.optional(v.pipe(v.object({extends: v.optional(v.pipe(v.string(), v.description("The value of that entry should be a path to another JSON file which also has a \\"volta\\" section")))}), v.description("Defines which tools and versions are expected to be used when Volta is installed."))),engineStrict: v.optional(v.boolean()),os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),preferGlobal: v.optional(v.boolean()),private: v.optional(v.any()),publishConfig: v.optional(v.object({access: v.optional(v.picklist(["public","restricted"])),tag: v.optional(v.string()),registry: v.optional(v.string()),provenance: v.optional(v.boolean())})),dist: v.optional(v.object({shasum: v.optional(v.string()),tarball: v.optional(v.string())})),readme: v.optional(v.string()),module: v.optional(v.pipe(v.string(), v.description("An ECMAScript module ID that is the primary entry point to your program."))),esnext: v.optional(v.union([v.pipe(v.string(), v.description("A module ID with untranspiled code that is the primary entry point to your program.")), v.pipe(v.object({main: v.optional(v.string()),browser: v.optional(v.string())}), v.description("A module ID with untranspiled code that is the primary entry point to your program."))])),workspaces: v.optional(v.any()),jspm: v.optional(v.any()),eslintConfig: v.optional(v.any()),prettier: v.optional(v.any()),stylelint: v.optional(v.any()),ava: v.optional(v.any()),release: v.optional(v.any()),jscpd: v.optional(v.any()),pnpm: v.optional(v.pipe(v.object({overrides: v.optional(v.object({})),packageExtensions: v.optional(v.object({})),peerDependencyRules: v.optional(v.any()),neverBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependenciesFile: v.optional(v.pipe(v.string(), v.description("Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process."))),allowedDeprecatedVersions: v.optional(v.object({})),patchedDependencies: v.optional(v.object({})),allowNonAppliedPatches: v.optional(v.boolean()),updateConfig: v.optional(v.object({ignoreDependencies: v.optional(v.array(v.string()))})),auditConfig: v.optional(v.object({ignoreCves: v.optional(v.array(v.pipe(v.string(), v.regex(/^CVE-\\d{4}-\\d{4,7}$/)))),ignoreGhsas: v.optional(v.array(v.pipe(v.string(), v.regex(/^GHSA(-[23456789cfghjmpqrvwx]{4}){3}$/))))})),requiredScripts: v.optional(v.array(v.string())),supportedArchitectures: v.optional(v.pipe(v.object({os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),libc: v.optional(v.array(v.string()))}), v.description("Specifies architectures for which you'd like to install optional dependencies, even if they don't match the architecture of the system running the install."))),ignoredOptionalDependencies: v.optional(v.array(v.string())),executionEnv: v.optional(v.object({nodeVersion: v.optional(v.pipe(v.string(), v.description("Specifies which exact Node.js version should be used for the project's runtime.")))}))}), v.description("Defines pnpm specific configuration.")))});"
`;

exports[`CLI > should write to output file 1`] = `
"import * as v from "valibot";

export default v.object({name: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(214), v.regex(/^(?:(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?\\/[a-z0-9-._~])|[a-z0-9-~])[a-z0-9-._~]*$/), v.description("The name of the package."))),version: v.optional(v.pipe(v.string(), v.description("Version must be parseable by node-semver, which is bundled with npm as a dependency."))),description: v.optional(v.pipe(v.string(), v.description("This helps people discover your package, as it's listed in 'npm search'."))),keywords: v.optional(v.array(v.string())),homepage: v.optional(v.pipe(v.string(), v.description("The url to the project homepage."))),bugs: v.optional(v.union([v.object({url: v.optional(v.pipe(v.string(), v.description("The url to your project's issue tracker."))),email: v.optional(v.pipe(v.string(), v.description("The email address to which issues should be reported.")))}), v.pipe(v.string(), v.description("The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package."))])),license: v.optional(v.any()),licenses: v.optional(v.array(v.object({type: v.optional(v.any()),url: v.optional(v.string())}))),author: v.optional(v.any()),contributors: v.optional(v.array(v.any())),maintainers: v.optional(v.array(v.any())),files: v.optional(v.array(v.string())),main: v.optional(v.pipe(v.string(), v.description("The main field is a module ID that is the primary entry point to your program."))),exports: v.optional(v.any()),imports: v.optional(v.object({})),bin: v.optional(v.union([v.string(), v.object({})])),type: v.optional(v.string(), 'commonjs'),types: v.optional(v.pipe(v.string(), v.description("Set the types property to point to your bundled declaration file."))),typings: v.optional(v.pipe(v.string(), v.description("Note that the \\"typings\\" field is synonymous with \\"types\\", and could be used as well."))),typesVersions: v.optional(v.object({})),man: v.optional(v.union([v.array(v.string()), v.pipe(v.string(), v.description("Specify either a single file or an array of filenames to put in place for the man program to find."))])),directories: v.optional(v.object({bin: v.optional(v.pipe(v.string(), v.description("If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash."))),doc: v.optional(v.pipe(v.string(), v.description("Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday."))),example: v.optional(v.pipe(v.string(), v.description("Put example scripts in here. Someday, it might be exposed in some clever way."))),lib: v.optional(v.pipe(v.string(), v.description("Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info."))),man: v.optional(v.pipe(v.string(), v.description("A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder."))),test: v.optional(v.string())})),repository: v.optional(v.union([v.object({type: v.optional(v.string()),url: v.optional(v.string()),directory: v.optional(v.string())}), v.pipe(v.string(), v.description("Specify the place where your code lives. This is helpful for people who want to contribute."))])),funding: v.optional(v.any()),scripts: v.optional(v.object({lint: v.optional(v.pipe(v.string(), v.description("Run code quality tools, e.g. ESLint, TSLint, etc."))),prepublish: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is published (Also run on local npm install without any arguments)."))),prepare: v.optional(v.pipe(v.string(), v.description("Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly."))),prepublishOnly: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is prepared and packed, ONLY on npm publish."))),prepack: v.optional(v.pipe(v.string(), v.description("run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies)."))),postpack: v.optional(v.pipe(v.string(), v.description("Run AFTER the tarball has been generated and moved to its final destination."))),publish: v.optional(v.pipe(v.string(), v.description("Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish"))),postpublish: v.optional(v.any()),preinstall: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is installed."))),install: v.optional(v.any()),postinstall: v.optional(v.any()),preuninstall: v.optional(v.any()),uninstall: v.optional(v.any()),postuninstall: v.optional(v.pipe(v.string(), v.description("Run AFTER the package is uninstalled."))),preversion: v.optional(v.any()),version: v.optional(v.any()),postversion: v.optional(v.pipe(v.string(), v.description("Run AFTER bump the package version."))),pretest: v.optional(v.any()),test: v.optional(v.any()),posttest: v.optional(v.any()),prestop: v.optional(v.any()),stop: v.optional(v.any()),poststop: v.optional(v.any()),prestart: v.optional(v.any()),start: v.optional(v.any()),poststart: v.optional(v.any()),prerestart: v.optional(v.any()),restart: v.optional(v.any()),postrestart: v.optional(v.any()),serve: v.optional(v.pipe(v.string(), v.description("Start dev server to serve application files")))})),config: v.optional(v.object({})),dependencies: v.optional(v.any()),devDependencies: v.optional(v.any()),optionalDependencies: v.optional(v.any()),peerDependencies: v.optional(v.any()),peerDependenciesMeta: v.optional(v.any()),bundleDependencies: v.optional(v.any()),bundledDependencies: v.optional(v.any()),resolutions: v.optional(v.object({})),overrides: v.optional(v.object({})),packageManager: v.optional(v.pipe(v.string(), v.regex(/(npm|pnpm|yarn|bun)@\\d+\\.\\d+\\.\\d+(-.+)?/), v.description("Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html"))),engines: v.optional(v.object({node: v.optional(v.string())})),volta: v.optional(v.object({extends: v.optional(v.pipe(v.string(), v.description("The value of that entry should be a path to another JSON file which also has a \\"volta\\" section")))})),engineStrict: v.optional(v.boolean()),os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),preferGlobal: v.optional(v.boolean()),private: v.optional(v.any()),publishConfig: v.optional(v.object({access: v.optional(v.picklist(["public","restricted"])),tag: v.optional(v.string()),registry: v.optional(v.string()),provenance: v.optional(v.boolean())})),dist: v.optional(v.object({shasum: v.optional(v.string()),tarball: v.optional(v.string())})),readme: v.optional(v.string()),module: v.optional(v.pipe(v.string(), v.description("An ECMAScript module ID that is the primary entry point to your program."))),esnext: v.optional(v.union([v.pipe(v.string(), v.description("A module ID with untranspiled code that is the primary entry point to your program.")), v.object({main: v.optional(v.string()),browser: v.optional(v.string())})])),workspaces: v.optional(v.any()),jspm: v.optional(v.any()),eslintConfig: v.optional(v.any()),prettier: v.optional(v.any()),stylelint: v.optional(v.any()),ava: v.optional(v.any()),release: v.optional(v.any()),jscpd: v.optional(v.any()),pnpm: v.optional(v.object({overrides: v.optional(v.object({})),packageExtensions: v.optional(v.object({})),peerDependencyRules: v.optional(v.any()),neverBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependenciesFile: v.optional(v.pipe(v.string(), v.description("Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process."))),allowedDeprecatedVersions: v.optional(v.object({})),patchedDependencies: v.optional(v.object({})),allowNonAppliedPatches: v.optional(v.boolean()),updateConfig: v.optional(v.object({ignoreDependencies: v.optional(v.array(v.string()))})),auditConfig: v.optional(v.object({ignoreCves: v.optional(v.array(v.pipe(v.string(), v.regex(/^CVE-\\d{4}-\\d{4,7}$/)))),ignoreGhsas: v.optional(v.array(v.pipe(v.string(), v.regex(/^GHSA(-[23456789cfghjmpqrvwx]{4}){3}$/))))})),requiredScripts: v.optional(v.array(v.string())),supportedArchitectures: v.optional(v.object({os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),libc: v.optional(v.array(v.string()))})),ignoredOptionalDependencies: v.optional(v.array(v.string())),executionEnv: v.optional(v.object({nodeVersion: v.optional(v.pipe(v.string(), v.description("Specifies which exact Node.js version should be used for the project's runtime.")))}))}))});"
`;

exports[`CLI > should write to output file with JSDoc comments 1`] = `
"import * as v from "valibot";

export default v.object({name: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(214), v.regex(/^(?:(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?\\/[a-z0-9-._~])|[a-z0-9-~])[a-z0-9-._~]*$/), v.description("The name of the package."))),version: v.optional(v.pipe(v.string(), v.description("Version must be parseable by node-semver, which is bundled with npm as a dependency."))),description: v.optional(v.pipe(v.string(), v.description("This helps people discover your package, as it's listed in 'npm search'."))),keywords: v.optional(v.array(v.string())),homepage: v.optional(v.pipe(v.string(), v.description("The url to the project homepage."))),bugs: v.optional(v.union([v.object({url: v.optional(v.pipe(v.string(), v.description("The url to your project's issue tracker."))),email: v.optional(v.pipe(v.string(), v.description("The email address to which issues should be reported.")))}), v.pipe(v.string(), v.description("The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package."))])),license: v.optional(v.any()),licenses: v.optional(v.array(v.object({type: v.optional(v.any()),url: v.optional(v.string())}))),author: v.optional(v.any()),contributors: v.optional(v.array(v.any())),maintainers: v.optional(v.array(v.any())),files: v.optional(v.array(v.string())),main: v.optional(v.pipe(v.string(), v.description("The main field is a module ID that is the primary entry point to your program."))),exports: v.optional(v.any()),imports: v.optional(v.object({})),bin: v.optional(v.union([v.string(), v.object({})])),type: v.optional(v.string(), 'commonjs'),types: v.optional(v.pipe(v.string(), v.description("Set the types property to point to your bundled declaration file."))),typings: v.optional(v.pipe(v.string(), v.description("Note that the \\"typings\\" field is synonymous with \\"types\\", and could be used as well."))),typesVersions: v.optional(v.object({})),man: v.optional(v.union([v.array(v.string()), v.pipe(v.string(), v.description("Specify either a single file or an array of filenames to put in place for the man program to find."))])),directories: v.optional(v.object({bin: v.optional(v.pipe(v.string(), v.description("If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash."))),doc: v.optional(v.pipe(v.string(), v.description("Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday."))),example: v.optional(v.pipe(v.string(), v.description("Put example scripts in here. Someday, it might be exposed in some clever way."))),lib: v.optional(v.pipe(v.string(), v.description("Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info."))),man: v.optional(v.pipe(v.string(), v.description("A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder."))),test: v.optional(v.string())})),repository: v.optional(v.union([v.object({type: v.optional(v.string()),url: v.optional(v.string()),directory: v.optional(v.string())}), v.pipe(v.string(), v.description("Specify the place where your code lives. This is helpful for people who want to contribute."))])),funding: v.optional(v.any()),scripts: v.optional(v.object({lint: v.optional(v.pipe(v.string(), v.description("Run code quality tools, e.g. ESLint, TSLint, etc."))),prepublish: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is published (Also run on local npm install without any arguments)."))),prepare: v.optional(v.pipe(v.string(), v.description("Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly."))),prepublishOnly: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is prepared and packed, ONLY on npm publish."))),prepack: v.optional(v.pipe(v.string(), v.description("run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies)."))),postpack: v.optional(v.pipe(v.string(), v.description("Run AFTER the tarball has been generated and moved to its final destination."))),publish: v.optional(v.pipe(v.string(), v.description("Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish"))),postpublish: v.optional(v.any()),preinstall: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is installed."))),install: v.optional(v.any()),postinstall: v.optional(v.any()),preuninstall: v.optional(v.any()),uninstall: v.optional(v.any()),postuninstall: v.optional(v.pipe(v.string(), v.description("Run AFTER the package is uninstalled."))),preversion: v.optional(v.any()),version: v.optional(v.any()),postversion: v.optional(v.pipe(v.string(), v.description("Run AFTER bump the package version."))),pretest: v.optional(v.any()),test: v.optional(v.any()),posttest: v.optional(v.any()),prestop: v.optional(v.any()),stop: v.optional(v.any()),poststop: v.optional(v.any()),prestart: v.optional(v.any()),start: v.optional(v.any()),poststart: v.optional(v.any()),prerestart: v.optional(v.any()),restart: v.optional(v.any()),postrestart: v.optional(v.any()),serve: v.optional(v.pipe(v.string(), v.description("Start dev server to serve application files")))})),config: v.optional(v.object({})),dependencies: v.optional(v.any()),devDependencies: v.optional(v.any()),optionalDependencies: v.optional(v.any()),peerDependencies: v.optional(v.any()),peerDependenciesMeta: v.optional(v.any()),bundleDependencies: v.optional(v.any()),bundledDependencies: v.optional(v.any()),resolutions: v.optional(v.object({})),overrides: v.optional(v.object({})),packageManager: v.optional(v.pipe(v.string(), v.regex(/(npm|pnpm|yarn|bun)@\\d+\\.\\d+\\.\\d+(-.+)?/), v.description("Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html"))),engines: v.optional(v.object({node: v.optional(v.string())})),volta: v.optional(v.object({extends: v.optional(v.pipe(v.string(), v.description("The value of that entry should be a path to another JSON file which also has a \\"volta\\" section")))})),engineStrict: v.optional(v.boolean()),os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),preferGlobal: v.optional(v.boolean()),private: v.optional(v.any()),publishConfig: v.optional(v.object({access: v.optional(v.picklist(["public","restricted"])),tag: v.optional(v.string()),registry: v.optional(v.string()),provenance: v.optional(v.boolean())})),dist: v.optional(v.object({shasum: v.optional(v.string()),tarball: v.optional(v.string())})),readme: v.optional(v.string()),module: v.optional(v.pipe(v.string(), v.description("An ECMAScript module ID that is the primary entry point to your program."))),esnext: v.optional(v.union([v.pipe(v.string(), v.description("A module ID with untranspiled code that is the primary entry point to your program.")), v.object({main: v.optional(v.string()),browser: v.optional(v.string())})])),workspaces: v.optional(v.any()),jspm: v.optional(v.any()),eslintConfig: v.optional(v.any()),prettier: v.optional(v.any()),stylelint: v.optional(v.any()),ava: v.optional(v.any()),release: v.optional(v.any()),jscpd: v.optional(v.any()),pnpm: v.optional(v.object({overrides: v.optional(v.object({})),packageExtensions: v.optional(v.object({})),peerDependencyRules: v.optional(v.any()),neverBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependenciesFile: v.optional(v.pipe(v.string(), v.description("Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process."))),allowedDeprecatedVersions: v.optional(v.object({})),patchedDependencies: v.optional(v.object({})),allowNonAppliedPatches: v.optional(v.boolean()),updateConfig: v.optional(v.object({ignoreDependencies: v.optional(v.array(v.string()))})),auditConfig: v.optional(v.object({ignoreCves: v.optional(v.array(v.pipe(v.string(), v.regex(/^CVE-\\d{4}-\\d{4,7}$/)))),ignoreGhsas: v.optional(v.array(v.pipe(v.string(), v.regex(/^GHSA(-[23456789cfghjmpqrvwx]{4}){3}$/))))})),requiredScripts: v.optional(v.array(v.string())),supportedArchitectures: v.optional(v.object({os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),libc: v.optional(v.array(v.string()))})),ignoredOptionalDependencies: v.optional(v.array(v.string())),executionEnv: v.optional(v.object({nodeVersion: v.optional(v.pipe(v.string(), v.description("Specifies which exact Node.js version should be used for the project's runtime.")))}))}))});"
`;

exports[`CLI > should write to output file without import 1`] = `"export default v.object({name: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(214), v.regex(/^(?:(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)?\\/[a-z0-9-._~])|[a-z0-9-~])[a-z0-9-._~]*$/), v.description("The name of the package."))),version: v.optional(v.pipe(v.string(), v.description("Version must be parseable by node-semver, which is bundled with npm as a dependency."))),description: v.optional(v.pipe(v.string(), v.description("This helps people discover your package, as it's listed in 'npm search'."))),keywords: v.optional(v.array(v.string())),homepage: v.optional(v.pipe(v.string(), v.description("The url to the project homepage."))),bugs: v.optional(v.union([v.object({url: v.optional(v.pipe(v.string(), v.description("The url to your project's issue tracker."))),email: v.optional(v.pipe(v.string(), v.description("The email address to which issues should be reported.")))}), v.pipe(v.string(), v.description("The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package."))])),license: v.optional(v.any()),licenses: v.optional(v.array(v.object({type: v.optional(v.any()),url: v.optional(v.string())}))),author: v.optional(v.any()),contributors: v.optional(v.array(v.any())),maintainers: v.optional(v.array(v.any())),files: v.optional(v.array(v.string())),main: v.optional(v.pipe(v.string(), v.description("The main field is a module ID that is the primary entry point to your program."))),exports: v.optional(v.any()),imports: v.optional(v.object({})),bin: v.optional(v.union([v.string(), v.object({})])),type: v.optional(v.string(), 'commonjs'),types: v.optional(v.pipe(v.string(), v.description("Set the types property to point to your bundled declaration file."))),typings: v.optional(v.pipe(v.string(), v.description("Note that the \\"typings\\" field is synonymous with \\"types\\", and could be used as well."))),typesVersions: v.optional(v.object({})),man: v.optional(v.union([v.array(v.string()), v.pipe(v.string(), v.description("Specify either a single file or an array of filenames to put in place for the man program to find."))])),directories: v.optional(v.object({bin: v.optional(v.pipe(v.string(), v.description("If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash."))),doc: v.optional(v.pipe(v.string(), v.description("Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday."))),example: v.optional(v.pipe(v.string(), v.description("Put example scripts in here. Someday, it might be exposed in some clever way."))),lib: v.optional(v.pipe(v.string(), v.description("Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info."))),man: v.optional(v.pipe(v.string(), v.description("A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder."))),test: v.optional(v.string())})),repository: v.optional(v.union([v.object({type: v.optional(v.string()),url: v.optional(v.string()),directory: v.optional(v.string())}), v.pipe(v.string(), v.description("Specify the place where your code lives. This is helpful for people who want to contribute."))])),funding: v.optional(v.any()),scripts: v.optional(v.object({lint: v.optional(v.pipe(v.string(), v.description("Run code quality tools, e.g. ESLint, TSLint, etc."))),prepublish: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is published (Also run on local npm install without any arguments)."))),prepare: v.optional(v.pipe(v.string(), v.description("Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly."))),prepublishOnly: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is prepared and packed, ONLY on npm publish."))),prepack: v.optional(v.pipe(v.string(), v.description("run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies)."))),postpack: v.optional(v.pipe(v.string(), v.description("Run AFTER the tarball has been generated and moved to its final destination."))),publish: v.optional(v.pipe(v.string(), v.description("Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish"))),postpublish: v.optional(v.any()),preinstall: v.optional(v.pipe(v.string(), v.description("Run BEFORE the package is installed."))),install: v.optional(v.any()),postinstall: v.optional(v.any()),preuninstall: v.optional(v.any()),uninstall: v.optional(v.any()),postuninstall: v.optional(v.pipe(v.string(), v.description("Run AFTER the package is uninstalled."))),preversion: v.optional(v.any()),version: v.optional(v.any()),postversion: v.optional(v.pipe(v.string(), v.description("Run AFTER bump the package version."))),pretest: v.optional(v.any()),test: v.optional(v.any()),posttest: v.optional(v.any()),prestop: v.optional(v.any()),stop: v.optional(v.any()),poststop: v.optional(v.any()),prestart: v.optional(v.any()),start: v.optional(v.any()),poststart: v.optional(v.any()),prerestart: v.optional(v.any()),restart: v.optional(v.any()),postrestart: v.optional(v.any()),serve: v.optional(v.pipe(v.string(), v.description("Start dev server to serve application files")))})),config: v.optional(v.object({})),dependencies: v.optional(v.any()),devDependencies: v.optional(v.any()),optionalDependencies: v.optional(v.any()),peerDependencies: v.optional(v.any()),peerDependenciesMeta: v.optional(v.any()),bundleDependencies: v.optional(v.any()),bundledDependencies: v.optional(v.any()),resolutions: v.optional(v.object({})),overrides: v.optional(v.object({})),packageManager: v.optional(v.pipe(v.string(), v.regex(/(npm|pnpm|yarn|bun)@\\d+\\.\\d+\\.\\d+(-.+)?/), v.description("Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html"))),engines: v.optional(v.object({node: v.optional(v.string())})),volta: v.optional(v.object({extends: v.optional(v.pipe(v.string(), v.description("The value of that entry should be a path to another JSON file which also has a \\"volta\\" section")))})),engineStrict: v.optional(v.boolean()),os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),preferGlobal: v.optional(v.boolean()),private: v.optional(v.any()),publishConfig: v.optional(v.object({access: v.optional(v.picklist(["public","restricted"])),tag: v.optional(v.string()),registry: v.optional(v.string()),provenance: v.optional(v.boolean())})),dist: v.optional(v.object({shasum: v.optional(v.string()),tarball: v.optional(v.string())})),readme: v.optional(v.string()),module: v.optional(v.pipe(v.string(), v.description("An ECMAScript module ID that is the primary entry point to your program."))),esnext: v.optional(v.union([v.pipe(v.string(), v.description("A module ID with untranspiled code that is the primary entry point to your program.")), v.object({main: v.optional(v.string()),browser: v.optional(v.string())})])),workspaces: v.optional(v.any()),jspm: v.optional(v.any()),eslintConfig: v.optional(v.any()),prettier: v.optional(v.any()),stylelint: v.optional(v.any()),ava: v.optional(v.any()),release: v.optional(v.any()),jscpd: v.optional(v.any()),pnpm: v.optional(v.object({overrides: v.optional(v.object({})),packageExtensions: v.optional(v.object({})),peerDependencyRules: v.optional(v.any()),neverBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependenciesFile: v.optional(v.pipe(v.string(), v.description("Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process."))),allowedDeprecatedVersions: v.optional(v.object({})),patchedDependencies: v.optional(v.object({})),allowNonAppliedPatches: v.optional(v.boolean()),updateConfig: v.optional(v.object({ignoreDependencies: v.optional(v.array(v.string()))})),auditConfig: v.optional(v.object({ignoreCves: v.optional(v.array(v.pipe(v.string(), v.regex(/^CVE-\\d{4}-\\d{4,7}$/)))),ignoreGhsas: v.optional(v.array(v.pipe(v.string(), v.regex(/^GHSA(-[23456789cfghjmpqrvwx]{4}){3}$/))))})),requiredScripts: v.optional(v.array(v.string())),supportedArchitectures: v.optional(v.object({os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),libc: v.optional(v.array(v.string()))})),ignoredOptionalDependencies: v.optional(v.array(v.string())),executionEnv: v.optional(v.object({nodeVersion: v.optional(v.pipe(v.string(), v.description("Specifies which exact Node.js version should be used for the project's runtime.")))}))}))});"`;

exports[`SchemaStore Integration Tests > should convert package.json schema 1`] = `
"import * as v from "valibot";

export default v.object({name: v.optional(v.pipe(v.string(), v.description('The name of the package.'))),version: v.optional(v.pipe(v.string(), v.description('Version must be parseable by node-semver, which is bundled with npm as a dependency.'))),description: v.optional(v.pipe(v.string(), v.description('This helps people discover your package, as it's listed in 'npm search'.'))),keywords: v.optional(v.array(v.string())),homepage: v.optional(v.pipe(v.string(), v.description('The url to the project homepage.'))),bugs: v.optional(v.union([v.object({url: v.optional(v.pipe(v.string(), v.description('The url to your project's issue tracker.'))),email: v.optional(v.pipe(v.string(), v.description('The email address to which issues should be reported.')))}), v.pipe(v.string(), v.description('The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.'))])),license: v.optional(v.any()),licenses: v.optional(v.array(v.object({type: v.optional(v.any()),url: v.optional(v.string())}))),author: v.optional(v.any()),contributors: v.optional(v.array(v.any())),maintainers: v.optional(v.array(v.any())),files: v.optional(v.array(v.string())),main: v.optional(v.pipe(v.string(), v.description('The main field is a module ID that is the primary entry point to your program.'))),exports: v.optional(v.any()),imports: v.optional(v.object({})),bin: v.optional(v.union([v.string(), v.object({})])),type: v.optional(v.string(), 'commonjs'),types: v.optional(v.pipe(v.string(), v.description('Set the types property to point to your bundled declaration file.'))),typings: v.optional(v.pipe(v.string(), v.description('Note that the "typings" field is synonymous with "types", and could be used as well.'))),typesVersions: v.optional(v.object({})),man: v.optional(v.union([v.array(v.string()), v.pipe(v.string(), v.description('Specify either a single file or an array of filenames to put in place for the man program to find.'))])),directories: v.optional(v.object({bin: v.optional(v.pipe(v.string(), v.description('If you specify a 'bin' directory, then all the files in that folder will be used as the 'bin' hash.'))),doc: v.optional(v.pipe(v.string(), v.description('Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday.'))),example: v.optional(v.pipe(v.string(), v.description('Put example scripts in here. Someday, it might be exposed in some clever way.'))),lib: v.optional(v.pipe(v.string(), v.description('Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info.'))),man: v.optional(v.pipe(v.string(), v.description('A folder that is full of man pages. Sugar to generate a 'man' array by walking the folder.'))),test: v.optional(v.string())})),repository: v.optional(v.union([v.object({type: v.optional(v.string()),url: v.optional(v.string()),directory: v.optional(v.string())}), v.pipe(v.string(), v.description('Specify the place where your code lives. This is helpful for people who want to contribute.'))])),funding: v.optional(v.any()),scripts: v.optional(v.object({lint: v.optional(v.pipe(v.string(), v.description('Run code quality tools, e.g. ESLint, TSLint, etc.'))),prepublish: v.optional(v.pipe(v.string(), v.description('Run BEFORE the package is published (Also run on local npm install without any arguments).'))),prepare: v.optional(v.pipe(v.string(), v.description('Run both BEFORE the package is packed and published, and on local npm install without any arguments. This is run AFTER prepublish, but BEFORE prepublishOnly.'))),prepublishOnly: v.optional(v.pipe(v.string(), v.description('Run BEFORE the package is prepared and packed, ONLY on npm publish.'))),prepack: v.optional(v.pipe(v.string(), v.description('run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies).'))),postpack: v.optional(v.pipe(v.string(), v.description('Run AFTER the tarball has been generated and moved to its final destination.'))),publish: v.optional(v.pipe(v.string(), v.description('Publishes a package to the registry so that it can be installed by name. See https://docs.npmjs.com/cli/v8/commands/npm-publish'))),postpublish: v.optional(v.any()),preinstall: v.optional(v.pipe(v.string(), v.description('Run BEFORE the package is installed.'))),install: v.optional(v.any()),postinstall: v.optional(v.any()),preuninstall: v.optional(v.any()),uninstall: v.optional(v.any()),postuninstall: v.optional(v.pipe(v.string(), v.description('Run AFTER the package is uninstalled.'))),preversion: v.optional(v.any()),version: v.optional(v.any()),postversion: v.optional(v.pipe(v.string(), v.description('Run AFTER bump the package version.'))),pretest: v.optional(v.any()),test: v.optional(v.any()),posttest: v.optional(v.any()),prestop: v.optional(v.any()),stop: v.optional(v.any()),poststop: v.optional(v.any()),prestart: v.optional(v.any()),start: v.optional(v.any()),poststart: v.optional(v.any()),prerestart: v.optional(v.any()),restart: v.optional(v.any()),postrestart: v.optional(v.any()),serve: v.optional(v.pipe(v.string(), v.description('Start dev server to serve application files')))})),config: v.optional(v.object({})),dependencies: v.optional(v.any()),devDependencies: v.optional(v.any()),optionalDependencies: v.optional(v.any()),peerDependencies: v.optional(v.any()),peerDependenciesMeta: v.optional(v.any()),bundleDependencies: v.optional(v.any()),bundledDependencies: v.optional(v.any()),resolutions: v.optional(v.object({})),overrides: v.optional(v.object({})),packageManager: v.optional(v.pipe(v.string(), v.description('Defines which package manager is expected to be used when working on the current project. This field is currently experimental and needs to be opted-in; see https://nodejs.org/api/corepack.html'))),engines: v.optional(v.object({node: v.optional(v.string())})),volta: v.optional(v.object({extends: v.optional(v.pipe(v.string(), v.description('The value of that entry should be a path to another JSON file which also has a "volta" section')))})),engineStrict: v.optional(v.boolean()),os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),preferGlobal: v.optional(v.boolean()),private: v.optional(v.any()),publishConfig: v.optional(v.object({access: v.optional(v.string()),tag: v.optional(v.string()),registry: v.optional(v.string()),provenance: v.optional(v.boolean())})),dist: v.optional(v.object({shasum: v.optional(v.string()),tarball: v.optional(v.string())})),readme: v.optional(v.string()),module: v.optional(v.pipe(v.string(), v.description('An ECMAScript module ID that is the primary entry point to your program.'))),esnext: v.optional(v.union([v.pipe(v.string(), v.description('A module ID with untranspiled code that is the primary entry point to your program.')), v.object({main: v.optional(v.string()),browser: v.optional(v.string())})])),workspaces: v.optional(v.any()),jspm: v.optional(v.any()),eslintConfig: v.optional(v.any()),prettier: v.optional(v.any()),stylelint: v.optional(v.any()),ava: v.optional(v.any()),release: v.optional(v.any()),jscpd: v.optional(v.any()),pnpm: v.optional(v.object({overrides: v.optional(v.object({})),packageExtensions: v.optional(v.object({})),peerDependencyRules: v.optional(v.any()),neverBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependencies: v.optional(v.array(v.string())),onlyBuiltDependenciesFile: v.optional(v.pipe(v.string(), v.description('Specifies a JSON file that lists the only packages permitted to run installation scripts during the pnpm install process.'))),allowedDeprecatedVersions: v.optional(v.object({})),patchedDependencies: v.optional(v.object({})),allowNonAppliedPatches: v.optional(v.boolean()),updateConfig: v.optional(v.object({ignoreDependencies: v.optional(v.array(v.string()))})),auditConfig: v.optional(v.object({ignoreCves: v.optional(v.array(v.string())),ignoreGhsas: v.optional(v.array(v.string()))})),requiredScripts: v.optional(v.array(v.string())),supportedArchitectures: v.optional(v.object({os: v.optional(v.array(v.string())),cpu: v.optional(v.array(v.string())),libc: v.optional(v.array(v.string()))})),ignoredOptionalDependencies: v.optional(v.array(v.string())),executionEnv: v.optional(v.object({nodeVersion: v.optional(v.pipe(v.string(), v.description('Specifies which exact Node.js version should be used for the project's runtime.')))}))}))});"
`;
